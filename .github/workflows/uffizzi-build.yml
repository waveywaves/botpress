name: Build PR Image
on:
  pull_request:
    types: [opened,synchronize,reopened,closed]

jobs:
  build-botpress:
    name: Build and Push `botpress`
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.head.repo.full_name == github.repository && (github.event_name != 'pull_request' || github.event.action != 'closed') }}
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: tibdex/github-app-token@v1
        id: generate-token
        with:
          app_id: app_id
          private_key: private_key
      - name: Checkout git repo
        uses: actions/checkout@v3
        with:
          token: ${{ steps.generate-token.outputs.token }}
          submodules: true
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'
      - name: Build Botpress
        run: |
          export npm_config_target_platform=linux
          export EDITION=pro
          git submodule update --init
          yarn --force --ignore-engines --frozen-lockfile
          yarn run build --linux --prod --verbose
          yarn run package --linux
          cp build/docker/Dockerfile packages/bp/binaries/
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Generate UUID image name
        id: uuid
        run: echo "UUID_TAG_APP=$(uuidgen)" >> $GITHUB_ENV
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: registry.uffizzi.com/${{ env.UUID_TAG_APP }}
          tags: type=raw,value=60d
      - name: Build and Push Image to registry.uffizzi.com ephemeral registry
        uses: docker/build-push-action@v2
        with:
          push: true
          context: ./packages/bp/binaries
          file: packages/bp/binaries/Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max


  render-compose-file:
    name: Render Docker Compose File
    # Pass output of this workflow to another triggered by `workflow_run` event.
    runs-on: ubuntu-latest
    needs:
      - build-botpress
    outputs:
      compose-file-cache-key: ${{ steps.hash.outputs.hash }}
    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3
      - name: Render Compose File
        run: |
          BOTPRESS_IMAGE=${{ needs.build-botpress.outputs.tags }}
          export BOTPRESS_IMAGE
          envsubst '${BOTPRESS_IMAGE}' < ./.github/uffizzi/docker-compose.uffizzi.yml > docker-compose.rendered.yml
          cat docker-compose.rendered.yml
      - name: Upload Rendered Compose File as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: preview-spec
          path: docker-compose.rendered.yml
          retention-days: 2
      - name: Serialize PR Event to File
        run:  |
          cat << EOF > event.json
          ${{ toJSON(github.event) }}
          EOF
      - name: Upload PR Event as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: preview-spec
          path: event.json
          retention-days: 2

  delete-preview:
    name: Call for Preview Deletion
    runs-on: ubuntu-latest
    if: ${{ github.event.action == 'closed' }}
    steps:
      # If this PR is closing, we will not render a compose file nor pass it to the next workflow.
      - name: Serialize PR Event to File
        run: echo '${{ toJSON(github.event) }}' > event.json
      - name: Upload PR Event as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: preview-spec
          path: event.json
          retention-days: 2
